// Generated by CoffeeScript 1.12.7
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

import share from './share.js';

FileCollection = (function(superClass) {
  extend(FileCollection, superClass);

  function FileCollection(root1, options) {
    var ref, ref1;
    this.root = root1 != null ? root1 : share.defaultRoot;
    if (options == null) {
      options = {};
    }
    if (!(this instanceof FileCollection)) {
      return new FileCollection(root, options);
    }
    if (!(this instanceof Mongo.Collection)) {
      throw new Meteor.Error('The global definition of Mongo.Collection has changed since the file-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before file-collection.');
    }
    if (Mongo.Collection !== Mongo.Collection.prototype.constructor) {
      throw new Meteor.Error('The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592');
    }
    if (typeof this.root === 'object') {
      options = this.root;
      this.root = share.defaultRoot;
    }
    this.base = this.root;
    this.baseURL = (ref = options.baseURL) != null ? ref : "/gridfs/" + this.root;
    this.chunkSize = (ref1 = options.chunkSize) != null ? ref1 : share.defaultChunkSize;
    FileCollection.__super__.constructor.call(this, this.root + '.files', {
      idGeneration: 'MONGO'
    });
    if (options.resumable) {
      share.setup_resumable.bind(this)();
    }
  }

  FileCollection.prototype.insert = function(file, callback) {
    if (callback == null) {
      callback = void 0;
    }
    file = share.insert_func(file, this.chunkSize);
    return FileCollection.__super__.insert.call(this, file, callback);
  };

  FileCollection.prototype.localUpdate = function(selector, modifier, options, callback) {
    var err;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = void 0;
    }
    if ((callback == null) && typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (options.upsert != null) {
      err = new Meteor.Error("Update does not support the upsert option");
      if (callback != null) {
        return callback(err);
      } else {
        throw err;
      }
    }
    if (share.reject_file_modifier(modifier)) {
      err = new Meteor.Error("Modifying gridFS read-only document elements is a very bad idea!");
      if (callback != null) {
        return callback(err);
      } else {
        throw err;
      }
    } else {
      return this.find().collection.update(selector, modifier, options, callback);
    }
  };

  FileCollection.prototype.allow = function() {
    throw new Meteor.Error("File Collection Allow rules may not be set in client code.");
  };

  FileCollection.prototype.deny = function() {
    throw new Meteor.Error("File Collection Deny rules may not be set in client code.");
  };

  FileCollection.prototype.upsert = function() {
    throw new Meteor.Error("File Collections do not support 'upsert'");
  };

  FileCollection.prototype.update = function() {
    throw new Meteor.Error("File Collections do not support 'update' on client, use method calls instead");
  };

  FileCollection.prototype.findOneStream = function() {
    throw new Meteor.Error("File Collections do not support 'findOneStream' in client code.");
  };

  FileCollection.prototype.upsertStream = function() {
    throw new Meteor.Error("File Collections do not support 'upsertStream' in client code.");
  };

  FileCollection.prototype.importFile = function() {
    throw new Meteor.Error("File Collections do not support 'importFile' in client code.");
  };

  FileCollection.prototype.exportFile = function() {
    throw new Meteor.Error("File Collections do not support 'exportFile' in client code.");
  };

  return FileCollection;

})(Mongo.Collection);

// Generated by CoffeeScript 1.12.7
import share from './share.js';

import Resumable from '../resumable/resumable.js';

if (Meteor.isClient) {
  if (!Function.prototype.bind) {
    Function.prototype.bind = function(oThis) {
      var aArgs, fBound, fNOP, fToBind;
      if (typeof this !== "function") {
        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
      }
      aArgs = Array.prototype.slice.call(arguments, 1);
      fToBind = this;
      fNOP = function() {};
      fBound = function() {
        var func;
        func = (this instanceof fNOP && oThis) ? this : oThis;
        return fToBind.apply(func, aArgs.concat(Array.prototype.slice.call(arguments)));
      };
      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();
      return fBound;
    };
  }
  share.setup_resumable = function() {
    var r, url;
    url = "" + this.baseURL + share.resumableBase;
    if (Meteor.isCordova) {
      url = Meteor.absoluteUrl(url.replace(/^\//, ''));
    }
    r = new Resumable({
      target: url,
      generateUniqueIdentifier: function(file) {
        return "" + (new Mongo.ObjectID());
      },
      fileParameterName: 'file',
      chunkSize: this.chunkSize,
      testChunks: true,
      testMethod: 'HEAD',
      permanentErrors: [204, 404, 415, 500, 501],
      simultaneousUploads: 3,
      maxFiles: void 0,
      maxFilesErrorCallback: void 0,
      prioritizeFirstAndLastChunk: false,
      query: void 0,
      headers: {},
      maxChunkRetries: 5,
      withCredentials: true
    });
    if (!r.support) {
      console.warn("resumable.js not supported by this Browser, uploads will be disabled");
      return this.resumable = null;
    } else {
      return this.resumable = r;
    }
  };
}
